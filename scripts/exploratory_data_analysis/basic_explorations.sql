
----------------------------------- DATABASE EXPLORATION ------------------------------------------

-- Explore all objects in the database.
SELECT * FROM INFORMATION_SCHEMA.TABLES;


-- Explore all columns in the database.
SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'dim_products';

----------------------------------- DIMENSIONS EXPLORATION -----------------------------------------

-- Explore all countries our customers come from.
SELECT DISTINCT country FROM report.dim_customers;


-- Explore all categories (major divisions).
SELECT DISTINCT category, subcategory, product_name FROM report.dim_products;

----------------------------------- DATE EXPLORATION -----------------------------------------------

-- Find how many years of sales happened.
SELECT 
	MAX(order_date) AS last_order_date, 
	MIN(order_date) AS first_order_date,
	DATEDIFF(year, MAX(order_date), MIN(order_date)) AS years_of_sales
FROM report.fact_sales;


-- Find the youngest and oldest customer with respect to age.
SELECT 
	MAX(birth_date) AS youngest_birthdate, 
	MIN(birth_date) AS oldest_birthdate,
	DATEDIFF(year, MAX(birth_date), GETDATE()) AS youngest_age,
	DATEDIFF(year, MIN(birth_date), GETDATE()) AS oldest_age
FROM report.dim_customers;

----------------------------------- MEASURES EXPLORATION --------------------------------------------

-- Find the total sales.
SELECT SUM(sales_amount) AS total_sales FROM report.fact_sales;


-- Find how many items are sold.
SELECT SUM(quantity) AS total_quantity FROM report.fact_sales;


-- Find the average selling price.
SELECT AVG(price) AS avg_selling_price FROM report.fact_sales;


-- Find the total number of orders.
SELECT COUNT(DISTINCT(order_number)) AS total_orders FROM report.fact_sales;


-- Find the total number of products.
SELECT COUNT(product_id) AS total_products FROM report.dim_products;


-- Find the total number of customers.
SELECT COUNT(customer_id) AS total_customers FROM report.dim_customers;


-- Find the total number of customers that has placed an order.
SELECT COUNT(DISTINCT(customer_key)) AS total_customer_orders FROM  report.fact_sales;


-- Genrate a report that shows all the key metrics.
SELECT 'Total Sales' AS measure_name, SUM(sales_amount) AS measure_value FROM report.fact_sales
UNION ALL
SELECT 'Total Quantity' AS measure_name, SUM(quantity) AS measure_value FROM report.fact_sales
UNION ALL
SELECT 'Average Selling Price' AS measure_name, AVG(price) AS measure_value FROM report.fact_sales
UNION ALL
SELECT 'Total Orders' AS measure_name, COUNT(DISTINCT(order_number)) AS measure_value FROM report.fact_sales
UNION ALL
SELECT 'Total Products' AS measure_name, COUNT(product_id) AS measure_value FROM report.dim_products
UNION ALL
SELECT 'Total Customers' AS measure_name, COUNT(customer_id) AS measure_value FROM report.dim_customers
UNION ALL
SELECT 'Total Customer Orders' AS measure_name, COUNT(DISTINCT(customer_key)) AS measure_value FROM report.fact_sales;

----------------------------------- MAGNITUDE ANALYSIS --------------------------------------------

-- Find total customers by countries.
SELECT country, COUNT(customer_id) AS total_customers
FROM report.dim_customers
GROUP BY country
ORDER BY total_customers DESC;


-- Find total customers by gender.
SELECT gender, COUNT(customer_id) AS total_customers
FROM report.dim_customers
GROUP BY gender
ORDER BY total_customers DESC;


-- Find total products by category.
SELECT category, COUNT(product_id) AS total_products
FROM report.dim_products
GROUP BY category
ORDER BY total_products DESC;


-- What is the average cost in each category?
SELECT category, AVG(cost) AS avg_cost
FROM report.dim_products
GROUP BY category
ORDER BY avg_cost DESC;


-- What is the total revenue generated for each category?
SELECT category, SUM(sales_amount) AS total_revenue
FROM report.dim_products p
LEFT JOIN report.fact_sales s
	ON p.product_key = s.product_key
GROUP BY category
ORDER BY total_revenue DESC;


-- Find total revenue generated by each customer.
SELECT customer_id, SUM(sales_amount) AS total_revenue
FROM report.fact_sales s
LEFT JOIN report.dim_customers c
	ON c.customer_key = s.customer_key
GROUP BY customer_id
ORDER BY total_revenue DESC;


-- What is the distribution of solid items across countries?
SELECT country, SUM(quantity) AS total_quantities
FROM report.fact_sales s
LEFT JOIN report.dim_customers c
	ON c.customer_key = s.customer_key
GROUP BY country
ORDER BY total_quantities DESC;

----------------------------------- RANKING ANALYSIS --------------------------------------------

-- Which 5 products generate the highest revenue?
SELECT * FROM (
	SELECT 
		product_name, 
		SUM(sales_amount) AS total_revenue,
		DENSE_RANK() OVER(ORDER BY SUM(sales_amount) DESC) AS rank_by_highest_revenue
	FROM report.dim_products p
	JOIN report.fact_sales s
		ON p.product_key = s.product_key
	GROUP BY product_name
	) x
WHERE rank_by_highest_revenue <= 5;


-- What are the 5 worst performing products in terms of sales?
SELECT * FROM (
	SELECT 
		product_name, 
		SUM(sales_amount) AS total_revenue,
		DENSE_RANK() OVER(ORDER BY SUM(sales_amount)) AS rank_by_lowest_revenue
	FROM report.dim_products p
	JOIN report.fact_sales s
		ON p.product_key = s.product_key
	GROUP BY product_name
	) x
WHERE rank_by_lowest_revenue <= 5;


-- Find the top 10 customers who have generated the highest revenue.
SELECT * FROM (
	SELECT 
		customer_id,
		CONCAT(first_name, ' ', last_name) AS customer_name,
		SUM(sales_amount) AS total_revenue,
		DENSE_RANK() OVER(ORDER BY SUM(sales_amount) DESC) AS rank_by_highest_revenue
	FROM report.dim_customers c
	JOIN report.fact_sales s
		ON c.customer_key = s.customer_key
	GROUP BY customer_id, CONCAT(first_name, ' ', last_name)
	) x
WHERE rank_by_highest_revenue <= 10;


-- Find the top 3 customers with the fewest orders placed.
SELECT * FROM (
	SELECT 
		customer_id,
		CONCAT(first_name, ' ', last_name) AS customer_name,
		COUNT(DISTINCT(order_number)) AS total_orders,
		DENSE_RANK() OVER(ORDER BY COUNT(DISTINCT(order_number))) AS rank_fewest_no_of_orders
	FROM report.dim_customers c
	JOIN report.fact_sales s
		ON c.customer_key = s.customer_key
	GROUP BY customer_id, CONCAT(first_name, ' ', last_name)
	) x
WHERE rank_fewest_no_of_orders <= 3;





